[{"/home/cyk/fullstackopen-submissions/part2/phonebook/src/App.js":"1","/home/cyk/fullstackopen-submissions/part2/phonebook/src/index.js":"2","/home/cyk/fullstackopen-submissions/part2/phonebook/src/services/dbService.js":"3","/home/cyk/phonebook/frontend/src/index.js":"4","/home/cyk/phonebook/frontend/src/App.js":"5","/home/cyk/phonebook/frontend/src/services/dbService.js":"6","/home/cyk/job-portal/frontend/src/index.js":"7","/home/cyk/job-portal/frontend/src/services/dbService.js":"8","/home/cyk/job-portal/frontend/src/App.jsx":"9","/home/cyk/job-portal/frontend/src/components/Common/Home.js":"10","/home/cyk/job-portal/frontend/src/components/Users/UsersList.js":"11","/home/cyk/job-portal/frontend/src/components/templates/Navbar.js":"12","/home/cyk/job-portal/frontend/src/components/templates/Example.jsx":"13","/home/cyk/job-portal/frontend/src/components/templates/SignIn.js":"14","/home/cyk/job-portal/frontend/src/components/templates/SignUp.js":"15","/home/cyk/job-portal/frontend/src/services/UserService.js":"16","/home/cyk/job-portal/frontend/src/components/Users/Apply.js":"17","/home/cyk/job-portal/frontend/src/components/Common/AddJob.js":"18","/home/cyk/job-portal/frontend/src/components/Users/Dashboard.js":"19","/home/cyk/job-portal/frontend/src/components/Users/ApplicantDashboard.js":"20","/home/cyk/job-portal/frontend/src/components/Users/RecruiterDashboard.js":"21","/home/cyk/job-portal/frontend/src/components/Users/Select.js":"22","/home/cyk/job-portal/frontend/src/components/Users/MyApplications.js":"23"},{"size":5238,"mtime":1607987566596,"results":"24","hashOfConfig":"25"},{"size":165,"mtime":1607984633604,"results":"26","hashOfConfig":"25"},{"size":691,"mtime":1607973322867,"results":"27","hashOfConfig":"25"},{"size":165,"mtime":1607984633604,"results":"28","hashOfConfig":"29"},{"size":5113,"mtime":1608486473828,"results":"30","hashOfConfig":"29"},{"size":674,"mtime":1608413322064,"results":"31","hashOfConfig":"29"},{"size":165,"mtime":1611344178347,"results":"32","hashOfConfig":"33"},{"size":1011,"mtime":1611330815839,"results":"34","hashOfConfig":"33"},{"size":3342,"mtime":1611349793876,"results":"35","hashOfConfig":"33"},{"size":397,"mtime":1610535901895,"results":"36","hashOfConfig":"33"},{"size":6233,"mtime":1611212395104,"results":"37","hashOfConfig":"33"},{"size":2339,"mtime":1611348418503,"results":"38","hashOfConfig":"33"},{"size":1078,"mtime":1610817598432,"results":"39","hashOfConfig":"33"},{"size":3396,"mtime":1611177612624,"results":"40","hashOfConfig":"33"},{"size":8013,"mtime":1611173444134,"results":"41","hashOfConfig":"33"},{"size":1175,"mtime":1611163243776,"results":"42","hashOfConfig":"33"},{"size":3359,"mtime":1611351485489,"results":"43","hashOfConfig":"33"},{"size":6373,"mtime":1611247395164,"results":"44","hashOfConfig":"33"},{"size":4646,"mtime":1611241967789,"results":"45","hashOfConfig":"33"},{"size":7412,"mtime":1611332811072,"results":"46","hashOfConfig":"33"},{"size":7393,"mtime":1611353518096,"results":"47","hashOfConfig":"33"},{"size":2284,"mtime":1611328016060,"results":"48","hashOfConfig":"33"},{"size":7299,"mtime":1611350860518,"results":"49","hashOfConfig":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cjhmzw",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"zwwvkj",{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"15bs9nj",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/cyk/fullstackopen-submissions/part2/phonebook/src/App.js",[],"/home/cyk/fullstackopen-submissions/part2/phonebook/src/index.js",[],"/home/cyk/fullstackopen-submissions/part2/phonebook/src/services/dbService.js",[],["106","107"],"/home/cyk/phonebook/frontend/src/index.js",[],["108","109"],"/home/cyk/phonebook/frontend/src/App.js",["110"],"/home/cyk/phonebook/frontend/src/services/dbService.js",[],"/home/cyk/job-portal/frontend/src/index.js",[],["111","112"],"/home/cyk/job-portal/frontend/src/services/dbService.js",[],"/home/cyk/job-portal/frontend/src/App.jsx",["113","114","115"],"/home/cyk/job-portal/frontend/src/components/Common/Home.js",["116"],"import React, {Component} from 'react';\nimport axios from 'axios';\n\nexport default class Home extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            name:'',\n            email:''\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                Happy Coding!\n           </div>\n        )\n    }\n}","/home/cyk/job-portal/frontend/src/components/Users/UsersList.js",["117","118","119"],"import React, {Component} from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nconst Filter = ({filterByTitle, handleFilterChange}) => {\n    return(\n      <div>\n        Filter shown with : <input value={filterByTitle} onChange={handleFilterChange}/>\n        <Grid item xs={12} md={9} lg={9}>\n        <List component=\"nav\" aria-label=\"mailbox folders\">\n            <TextField \n            id=\"standard-basic\" \n            label=\"Search\" \n            fullWidth={true}   \n            InputProps={{\n                endAdornment: (\n                    <InputAdornment>\n                        <IconButton>\n                            <SearchIcon />\n                        </IconButton>\n                    </InputAdornment>\n                )}}\n            />\n        </List>\n        </Grid>\n      </div>\n    )\n  }\n\nclass UsersList extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {users: [],sortedUsers: [], sortName:true};\n        this.renderIcon = this.renderIcon.bind(this);\n        this.sortChange = this.sortChange.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/user')\n             .then(response => {\n                 this.setState({users: response.data, sortedUsers:response.data});\n             })\n             .catch(function(error) {\n                 console.log(error);\n             })\n    }\n\n    sortChange(){\n/**\n *      Note that this is sorting only at front-end.\n */\n        var array = this.state.users;\n        var flag = this.state.sortName;\n        array.sort(function(a, b) {\n            if(a.date != undefined && b.date != undefined){\n                return (1 - flag*2) * (new Date(a.date) - new Date(b.date));\n            }\n            else{\n                return 1;\n            }\n          });\n        this.setState({\n            users:array,\n            sortName:!this.state.sortName,\n        })\n    }\n\n    renderIcon(){\n        if(this.state.sortName){\n            return(\n                <ArrowDownwardIcon/>\n            )\n        }\n        else{\n            return(\n                <ArrowUpwardIcon/>\n            )            \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container>\n                <Grid item xs={12} md={3} lg={3}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <ListItem text>\n                                        <h3>Filters</h3>\n                        </ListItem>\n                    </List>\n                </Grid>\n                   \n                </Grid>\n                <Grid container>\n                    <Grid item xs={12} md={3} lg={3}>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n\n                            <ListItem button>\n                                <form noValidate autoComplete=\"off\">\n                                    <label>Salary</label>\n                                    <TextField id=\"standard-basic\" label=\"Enter Min\" fullWidth={true} />\n                                    <TextField id=\"standard-basic\" label=\"Enter Max\" fullWidth={true}/>\n                                </form>                                                                \n                            </ListItem>\n                            <Divider />\n                            <ListItem button divider>\n                                <Autocomplete\n                                    id=\"combo-box-demo\"\n                                    options={this.state.users}\n                                    getOptionLabel={(option) => option.name}\n                                    style={{ width: 300 }}\n                                    renderInput={(params) => <TextField {...params} label=\"Select Names\" variant=\"outlined\" />}\n                                />\n                            </ListItem>\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                            <TableCell> <Button onClick={this.sortChange}>{this.renderIcon()}</Button>Date</TableCell>\n                                            <TableCell>Name</TableCell>\n                                            <TableCell>Email</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.users.map((user,ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{user.date}</TableCell>\n                                            <TableCell>{user.name}</TableCell>\n                                            <TableCell>{user.email}</TableCell>\n                                        </TableRow>\n                                ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>               \n                    </Grid>    \n                </Grid>            \n            </div>\n        )\n    }\n}\n\nexport default UsersList;","/home/cyk/job-portal/frontend/src/components/templates/Navbar.js",["120","121"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom'\nimport UserService from '../../services/UserService'\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText\n} from 'reactstrap';\n\nconst Example = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const history = useHistory()\n  const toggle = () => setIsOpen(!isOpen);\n  if(props.loggedIn && props.user.user.role==='applicant')\n  return (\n    <div>\n      <Navbar className=\"light\" dark expand=\"md\">\n        <NavbarBrand href=\"/\">NaukriSearch</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"navbar-nav ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Dashboard</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/myapplications\">My Applications</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"#\" onClick={async () => {\n                await UserService.logout()\n                .then(r => props.reloadHook())\n              }} >Logout</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n  else if(props.loggedIn)\n  return(\n    <div>\n      <Navbar className=\"light\" dark expand=\"md\">\n        <NavbarBrand href=\"/\">NaukriSearch</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"navbar-nav ml-auto\" navbar>\n            <NavItem>\n              <NavLink href=\"/\">Dashboard</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/createNew\">Post a Job</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"/employees\">Employees</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"#\" onClick={async () => {\n                await UserService.logout()\n                .then(r => props.reloadHook())\n              }} >Logout</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  )\n  else \n  return (\n    <div>\n      <Navbar color=\"light\" dark  expand=\"md\">\n        <NavbarBrand href=\"/\">NaukriSearch</NavbarBrand>\n      </Navbar>\n    </div>\n  );\n\n}\n\nexport default Example;\n","/home/cyk/job-portal/frontend/src/components/templates/Example.jsx",[],"/home/cyk/job-portal/frontend/src/components/templates/SignIn.js",["122","123","124","125"],"import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport UserService from '../../services/UserService'\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nconst SignIn = (props) => {\n  const [ newPass, setNewPass ] = useState('')\n  const [ newMail, setNewMail ] = useState('')\n  const classes = useStyles();\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    const newUser = {\n      email:newMail,\n      password:newPass\n    }\n    await UserService.login(newUser)\n    .then(data => {\n      props.reloadHook()\n      return data.user.role\n    }\n    )\n    .catch(error => console.log(error) )\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} onSubmit={handleSubmit} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoComplete=\"email\"\n            autoFocus\n            value ={newMail}\n            onChange={e => setNewMail(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            value ={newPass}\n            onChange={e => setNewPass(e.target.value)}\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          <Grid container>\n            <Grid item>\n              <Link href=\"/register\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n      </Box>\n    </Container>\n  );\n}\n\nexport default SignIn;","/home/cyk/job-portal/frontend/src/components/templates/SignUp.js",["126","127","128","129","130"],"import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport UserService from '../../services/UserService'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst ExtraForm = ({\n  newRole,\n  newInstitute,\n  newStartYr,\n  newEndYr,\n  newBio,\n  newContactNo,\n  setNewInstitute,\n  setNewStartYr,\n  setNewEndYr,\n  setNewBio,\n  setNewContactNo\n}) => {\n\n    if(newRole===\"applicant\")\n    {   \n      return(\n        <>\n        <Grid item xs={12}>\n          <TextField\n            variant=\"outlined\"\n            required\n            fullWidth\n            name=\"institute\"\n            label=\"College name\"\n            id=\"institute\"\n            value ={newInstitute}\n            onChange={e => setNewInstitute(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            variant=\"outlined\"\n            required\n            fullWidth\n            name=\"startYear\"\n            label=\"Start Year\"\n            id=\"startYear\"\n            value ={newStartYr}\n            onChange={e => setNewStartYr(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"endYear\"\n            label=\"End Year\"\n            id=\"endYear\"\n            value ={newEndYr}\n            onChange={e => setNewEndYr(e.target.value)}\n          />\n        </Grid>\n      </>);\n    }\n    \n    else if(newRole===\"recruiter\")\n    {\n    \n      return ( \n        <>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              required\n              fullWidth\n              name=\"contactNumber\"\n              label=\"Contact number\"\n              id=\"contactNumber\"\n              value ={newContactNo}\n              onChange={e => setNewContactNo(e.target.value)}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              name=\"bio\"\n              label=\"Bio\"\n              id=\"bio\"\n              value ={newBio}\n              onChange={e => setNewBio(e.target.value)}\n            />\n          </Grid>\n        </>);\n    }  \n\n  return <></>\n}\n\nconst SignUp = (props) => {\n\n  const [ newName, setNewName ] = useState('')\n  const [ newPass, setNewPass ] = useState('')\n  const [ newMail, setNewMail ] = useState('')\n  const [ newRole, setNewRole ] = useState('')\n  const [ newForm, setNewForm ] = useState('')\n  const [ newStartYr, setNewStartYr ] = useState('')\n  const [ newEndYr, setNewEndYr ] = useState('')\n  const [ newContactNo, setNewContactNo ] = useState('')\n  const [ newBio, setNewBio ] = useState('')\n  const [ newInstitute, setNewInstitute ] = useState('')\n\n  \n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    let newUser ={}\n    if(newRole==='applicant'){\n      newUser = {\n        user:{\n          name:newName,\n          email:newMail,\n          password:newPass,\n          role:newRole\n        },\n        education:[{\n          name:newInstitute,\n          startYear:newStartYr,\n          endYear:newEndYr\n        }]\n      }\n    }\n    else{ \n      newUser ={\n        user:{\n          name:newName,\n          email:newMail,\n          password:newPass,\n          role:newRole\n        },\n        contactNumber:newContactNo,\n        bio:newBio \n      }\n    }\n    UserService.register(newUser)\n    .then(r => props.reloadHook())\n    .catch(err => console.error(err))\n\n  }\n  const classes = useStyles();\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form}\n              onSubmit = {handleSubmit}\n        noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                autoComplete=\"name\"\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Name\"\n                autoFocus\n                value ={newName}\n                onChange={e => setNewName(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value ={newMail}\n                onChange={e => setNewMail(e.target.value)}\n              />\n              \n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                value ={newPass}\n                onChange={e => setNewPass(e.target.value)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"role\"\n                label=\"Role\"\n                type=\"role\"\n                id=\"role\"\n                value={newRole}\n                onChange={e => {\n                  setNewRole(e.target.value)             \n                  }\n                }\n              select>\n              <MenuItem value=\"applicant\">Job Applicant</MenuItem>\n              <MenuItem value=\"recruiter\">Job Recruiter</MenuItem>\n            </TextField>\n            </Grid>\n            <ExtraForm\n                newRole={newRole}\n                newInstitute={newInstitute}\n                newStartYr={newStartYr}\n                newEndYr={newEndYr}\n                newBio={newBio}\n                newContactNo={newContactNo}\n                setNewInstitute={setNewInstitute}\n                setNewStartYr={setNewStartYr}\n                setNewEndYr={setNewEndYr}\n                setNewBio={setNewBio}\n                setNewContactNo={setNewContactNo}\n            />\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n      </Box>\n    </Container>\n  );\n}\n\nexport default SignUp;","/home/cyk/job-portal/frontend/src/services/UserService.js",[],"/home/cyk/job-portal/frontend/src/components/Users/Apply.js",["131","132","133","134","135"],"/home/cyk/job-portal/frontend/src/components/Common/AddJob.js",["136","137","138","139","140","141","142","143","144","145","146"],"import React, { useState, useEffect } from 'react'\nimport dbService from '../../services/dbService'\nimport { useForm } from 'react-hook-form';\n\nconst Notification = ({message, flag}) => { //flag 0 -> error , 1-> success\n  if (message === null) {\n    return null\n  }\n\n  if(flag ===1){\n    return (\n      <div className=\"success\">\n        {message}\n      </div>\n    )\n  }\n  \n  else {\n   return (\n      <div className=\"error\">\n        {message}\n      </div>\n    ) \n  }\n}\n\nconst Filter = ({filterByTitle, handleFilterChange}) => {\n  return(\n    <div>\n      Filter shown with : <input value={filterByTitle} onChange={handleFilterChange}/>\n    </div>\n  )\n}\n\nconst Phonebook = ({addJob, newTitle, newSalary, handleTitleChange, handleSalaryChange}) => {\n  return(\n    <div>\n      <h2>Add new</h2>\n        <form onSubmit={addJob}>\n          <div>\n            title:\n            <input \n              value={newTitle}\n              onChange={handleTitleChange}/>\n            salary:\n            <input \n              value={newSalary}\n              onChange={handleSalaryChange}/>\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n    </div>\n    )\n} \n\n\nconst Salarys = ({jobs, deleteId}) => {\n  return(\n    <div>\n      <h2>Salarys</h2>\n      <ul> {jobs.filter( (job) => job\n        ).map( (job, ind) => {\n          return(\n            <li key={job._id} >\n              {job.title} {job.salary}\n              <button type='button' onClick={() => deleteId(job._id, window.confirm(`delete ${job.title}?`))}>delete</button>\n          </li>       \n          )})\n        }\n      </ul>\n    </div>\n  )\n}\n\n\nconst App = (props) => {\n  const [ jobs, setJobs ] = useState([]) \n  const [ newJob, setNewJob ] = useState({})\n  const [ message, setMessage] = useState(null)\n  const [notifyFlag, setNotifyFlag ] = useState(0);\n  const { register, handleSubmit, errors } = useForm();\n\n  const hook = () => {\n    console.log(props.user.user.email,'effect')\n    \n    dbService\n      .getAll(props.user.user.email)\n      .then(responseData => {\n        console.log('promise fulfilled')\n        setJobs(responseData)\n      })\n      .catch(error => console.log(error))\n  } \n\n  useEffect(hook, [])\n\n  const notify = (message, flag) =>{\n    setNotifyFlag(flag)\n    //console.log(notifyFlag)\n    setMessage(message)\n    setTimeout(() => setMessage(null) , 5000)\n  }\n  const addJob = (data) => {\n    \n    setNewJob(data)\n    let titleObj = data\n    \n\n    titleObj.recruiter = { \n      name:props.user.user.name,\n      email:props.user.user.email\n    }\n\n    console.log(titleObj)\n    // const titleObj = {\n    //   title: newTitle,\n    //   recruiter:{ \n    //     name: props.user.user.name,\n    //     email: props.user.user.email\n    //   },\n    //   maxNoOf:{\n    //     applications:newMaxApplications,\n    //     positions:newMaxPositions\n    //   },\n    //   deadline: newDeadline,\n    //   requiredSkillSets:newSkills, \n    //   typeOfJob:newTypeOfJob, \n    //   duration:newDuration,  \n    //   salary: newSalary\n    // \n  // }\n      dbService\n        .create(titleObj)\n        .then(responseData => {\n          setJobs(jobs.concat(responseData))\n          console.log(responseData)\n          notify(`Added ${responseData.title}`, 1)\n\n        })\n        .catch(error => {\n          notify(error.response.data.error,0)\n          console.log(error.response.data.error)\n        })\n  }\n  const updateId = (id, jobObj, confirmed) => {\n    const jobTitle = jobs[jobs.map(job => job._id).indexOf(id)].title\n    if (confirmed) {\n      dbService.update(id, jobObj)\n        .then(res => {\n          setJobs(jobs.filter(job => job._id !== id).concat(jobObj))\n          notify(`Updated ${jobObj.title}'s salary`, 1)\n        })\n        .catch(error => { \n          notify(error.response.data.error,0)\n        })\n    }\n  }\n\n  const deleteId = (id, confirmed) => {\n    const jobTitle = jobs[jobs.map(job => job._id).indexOf(id)].title\n    if (confirmed) {\n      dbService.deleteObj(id)\n        .then(res => {\n          setJobs(jobs.filter(job => job._id !== id))\n        })\n        .catch(error => { \n          notify(`${jobTitle} was already removed`,0)\n          setJobs(jobs.filter(job => job._id !== id))\n        })\n    }\n  }\n\n  const onSubmit = (data) =>{\n    alert(JSON.stringify(data));\n    console.log(errors);\n    addJob(data);\n  }\n  \n  return (\n    <div>\n      <h1 className=\"display-2 text-center\" >Add new posting</h1>\n      <br/><br/><br/>\n      <form className=\"form-group text-center\" onSubmit={handleSubmit(onSubmit)}>\n      <input className=\"form-control\" type=\"text\" placeholder=\"Job title\" name=\"title\" ref={register({required: \"This field is required\", maxLength: 80})} />\n      <p>{errors.title?.message}</p>\n      <input className=\"form-control\" type=\"number\" placeholder=\"Max no. of applications\" name=\"maxNoOf.applications\" ref={register({required: \"This field is required\"})} />\n      <p>{errors.maxNoOf?.message}</p>\n      <input className=\"form-control\" type=\"number\" placeholder=\"Max. no. of positions\" name=\"maxNoOf.positions\" ref={register({required: \"This field is required\"})} />\n      <p>{errors.maxNoOf?.message}</p>\n      <input className=\"form-control\" type=\"datetime-local\" placeholder=\"Deadline\" name=\"deadline\" ref={register({required: \"This field is required\"})} />\n      <p>{errors.deadline?.message}</p>\n      <input className=\"form-control\" type=\"text\" placeholder=\"Required skills\" name=\"requiredSkillSets\" ref={register({required: \"This field is required\"})} />\n      <p>{errors.requiredSkillSets?.message}</p>\n      <select className=\"form-control\" name=\"typeOfJob\" ref={register({ required: \"This field is required\" })}>\n        <option value=\"full-time\">Full time</option>\n        <option value=\"part-time\">Part time</option>\n        <option value=\"WFH\">Work From Home</option>\n      </select>\n      <p>{errors.typeOfJob?.message}</p>\n      <input className=\"form-control\" type=\"number\" placeholder=\"Duration\" name=\"duration\" ref={register({required: \"This field is required\"})} />\n      <p>{errors.duration?.message}</p>\n      <input className=\"form-control\" type=\"number\" placeholder=\"Salary\" name=\"salary\" ref={register({required: \"This field is required\"})} />\n      <p>{errors.salary?.message}</p>\n      <input className=\"form-control\" type=\"submit\" />\n    </form>\n    </div>\n  )\n}\n\nexport default App","/home/cyk/job-portal/frontend/src/components/Users/Dashboard.js",["147","148","149","150","151"],"/home/cyk/job-portal/frontend/src/components/Users/ApplicantDashboard.js",["152","153","154","155"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Dialog from './Apply.js'\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport dbService from '../../services/dbService'\r\n\r\nconst Filter = ({filterByTitle, handleFilterChange, jobs}) => {\r\n    return(\r\n        <div>\r\n        <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            options={jobs}\r\n            getOptionLabel={(option) => option.title}\r\n            style={{ width: 300 }}\r\n            onInputChange={handleFilterChange} \r\n            renderInput={(params) => <TextField {...params}  label=\"Select Job\" variant=\"outlined\" />}\r\n        />\r\n        </div>\r\n    )\r\n  }\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    heroButtons: {\r\n        marginTop: theme.spacing(4),\r\n    }\r\n\r\n}));\r\n    \r\nconst JobsList = (props) => {\r\n    const classes = useStyles();\r\n    const [jobs, setJobs] = useState([])\r\n    const [sortedJobs, setSortedJobs] = useState([])\r\n    const [sortName, setSortName] = useState(true)\r\n    const [filterByTitle, setFilterByTitle] = useState('')\r\n\r\n    const loadHook= () => {\r\n        axios.get('/api/jobs')\r\n             .then(response => {\r\n                //  console.log(response);\r\n                setJobs(response.data)\r\n                setSortedJobs(response.data)\r\n             })\r\n             .catch(function(error) {\r\n                 console.log(error);\r\n                //  console.log(\"errorrrr\");\r\n             })\r\n    }\r\n    useEffect(loadHook, [])\r\n\r\n    const sortChange = () => {\r\n/**\r\n *      Note that this is sorting only at front-end.\r\n */\r\n        let array = jobs;\r\n        let flag = sortName;\r\n        array.sort(function(a, b) {\r\n            if(a.date != undefined && b.date != undefined){\r\n                return (1 - flag*2) * (new Date(a.date) - new Date(b.date));\r\n            }\r\n            else{\r\n                return 1;\r\n            }\r\n          });\r\n        setJobs(array)\r\n        setSortName(!sortName)\r\n    }\r\n\r\n    const renderIcon = () =>{\r\n        if(sortName){\r\n            return(\r\n                <ArrowDownwardIcon/>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <ArrowUpwardIcon/>\r\n            )            \r\n        }\r\n    }\r\n\r\n    const applyButton = (button, job, user) =>{\r\n        if(sortName){\r\n            return(\r\n                <Dialog button={button} job={job} user={user}/>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <ArrowUpwardIcon/>\r\n            )            \r\n        }\r\n    }\r\n\r\n\r\n    const handleFilterChange = (event, value) => {\r\n        //setFilterByTitle(event.target.value);\r\n        setFilterByTitle(value)\r\n    }\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <div className={classes.heroContent}>\r\n            <Container maxWidth=\"sm\">\r\n                <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                    Job Listings\r\n                </Typography>\r\n            </Container>\r\n            </div>\r\n            <Grid container>\r\n            <Grid item xs={12} md={3} lg={3}>\r\n                <List component=\"nav\" aria-label=\"mailbox folders\">\r\n                    <ListItem >\r\n                                    <h3>Filters</h3>\r\n                    </ListItem>\r\n                </List>\r\n            </Grid>\r\n            \r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} md={3} lg={3}>\r\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\r\n\r\n                        <ListItem button>\r\n                            <form noValidate autoComplete=\"off\">\r\n                                <label>Salary</label>\r\n                                <TextField id=\"MinSalary\" label=\"Enter Min\" fullWidth={true} />\r\n                                <TextField id=\"MaxSalary\" label=\"Enter Max\" fullWidth={true}/>\r\n                            </form>                                                                \r\n                        </ListItem>\r\n                        <Divider />\r\n                        <ListItem button divider>\r\n                        <Filter filterByTitle={filterByTitle} handleFilterChange={handleFilterChange} jobs ={jobs} />\r\n                        </ListItem>\r\n                    </List>\r\n                </Grid>\r\n                <Grid item xs={12} md={9} lg={9}>\r\n                    <Paper>\r\n                        <Table size=\"small\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                        <TableCell>Title</TableCell>\r\n                                        <TableCell> <Button onClick={sortChange}>{renderIcon()}</Button>Deadline</TableCell>\r\n                                        <TableCell>Recruiter</TableCell>\r\n                                        <TableCell>Salary</TableCell>\r\n                                        <TableCell>Rating</TableCell>\r\n                                        <TableCell>Duration</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                            {\r\n                                jobs.filter( (job) => job.title.toLowerCase().includes(filterByTitle.toLowerCase())\r\n                                ).map((job) => (\r\n                                    <TableRow key={job._id}>\r\n                                        <TableCell>{job.title}</TableCell>\r\n                                        <TableCell>{new Date(job.deadline).toLocaleString()}</TableCell>\r\n                                        <TableCell>{job.recruiter.name}</TableCell>\r\n                                        <TableCell>{job.salary}</TableCell>\r\n                                        <TableCell>{job.rating}</TableCell>\r\n                                        <TableCell>{job.duration} months</TableCell>\r\n                                        <TableCell>{applyButton(\"Apply\",job,props.user.user)}</TableCell>\r\n                                    </TableRow>\r\n                            ))\r\n                            }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Paper>               \r\n                </Grid>    \r\n            </Grid>            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default JobsList;\r\n","/home/cyk/job-portal/frontend/src/components/Users/RecruiterDashboard.js",["156","157","158","159","160","161","162"],"/home/cyk/job-portal/frontend/src/components/Users/Select.js",[],"/home/cyk/job-portal/frontend/src/components/Users/MyApplications.js",["163","164","165","166"],{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"167","replacedBy":"171"},{"ruleId":"169","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":136,"column":11,"nodeType":"175","messageId":"176","endLine":136,"endColumn":21},{"ruleId":"167","replacedBy":"177"},{"ruleId":"169","replacedBy":"178"},{"ruleId":"173","severity":1,"message":"179","line":2,"column":42,"nodeType":"175","messageId":"176","endLine":2,"endColumn":46},{"ruleId":"173","severity":1,"message":"180","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":12},{"ruleId":"173","severity":1,"message":"181","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":15},{"ruleId":"173","severity":1,"message":"182","line":2,"column":8,"nodeType":"175","messageId":"176","endLine":2,"endColumn":13},{"ruleId":"173","severity":1,"message":"183","line":24,"column":7,"nodeType":"175","messageId":"176","endLine":24,"endColumn":13},{"ruleId":"184","severity":1,"message":"185","line":75,"column":23,"nodeType":"186","messageId":"187","endLine":75,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":75,"column":46,"nodeType":"186","messageId":"187","endLine":75,"endColumn":48},{"ruleId":"173","severity":1,"message":"188","line":12,"column":3,"nodeType":"175","messageId":"176","endLine":12,"endColumn":13},{"ruleId":"173","severity":1,"message":"189","line":17,"column":9,"nodeType":"175","messageId":"176","endLine":17,"endColumn":16},{"ruleId":"173","severity":1,"message":"190","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":24},{"ruleId":"173","severity":1,"message":"191","line":7,"column":8,"nodeType":"175","messageId":"176","endLine":7,"endColumn":16},{"ruleId":"173","severity":1,"message":"192","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":14},{"ruleId":"173","severity":1,"message":"193","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":16},{"ruleId":"173","severity":1,"message":"190","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":24},{"ruleId":"173","severity":1,"message":"191","line":7,"column":8,"nodeType":"175","messageId":"176","endLine":7,"endColumn":16},{"ruleId":"173","severity":1,"message":"192","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":14},{"ruleId":"173","severity":1,"message":"194","line":135,"column":11,"nodeType":"175","messageId":"176","endLine":135,"endColumn":18},{"ruleId":"173","severity":1,"message":"195","line":135,"column":20,"nodeType":"175","messageId":"176","endLine":135,"endColumn":30},{"ruleId":"173","severity":1,"message":"196","line":5,"column":8,"nodeType":"175","messageId":"176","endLine":5,"endColumn":20},{"ruleId":"173","severity":1,"message":"197","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":16},{"ruleId":"173","severity":1,"message":"198","line":7,"column":8,"nodeType":"175","messageId":"176","endLine":7,"endColumn":12},{"ruleId":"173","severity":1,"message":"199","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":15},{"ruleId":"173","severity":1,"message":"200","line":16,"column":8,"nodeType":"175","messageId":"176","endLine":16,"endColumn":21},{"ruleId":"173","severity":1,"message":"201","line":5,"column":7,"nodeType":"175","messageId":"176","endLine":5,"endColumn":19},{"ruleId":"173","severity":1,"message":"183","line":27,"column":7,"nodeType":"175","messageId":"176","endLine":27,"endColumn":13},{"ruleId":"173","severity":1,"message":"202","line":35,"column":7,"nodeType":"175","messageId":"176","endLine":35,"endColumn":16},{"ruleId":"173","severity":1,"message":"203","line":59,"column":7,"nodeType":"175","messageId":"176","endLine":59,"endColumn":14},{"ruleId":"173","severity":1,"message":"204","line":80,"column":11,"nodeType":"175","messageId":"176","endLine":80,"endColumn":17},{"ruleId":"173","severity":1,"message":"205","line":81,"column":11,"nodeType":"175","messageId":"176","endLine":81,"endColumn":18},{"ruleId":"173","severity":1,"message":"206","line":82,"column":10,"nodeType":"175","messageId":"176","endLine":82,"endColumn":20},{"ruleId":"207","severity":1,"message":"208","line":97,"column":19,"nodeType":"209","endLine":97,"endColumn":21,"suggestions":"210"},{"ruleId":"173","severity":1,"message":"211","line":147,"column":9,"nodeType":"175","messageId":"176","endLine":147,"endColumn":17},{"ruleId":"173","severity":1,"message":"212","line":148,"column":11,"nodeType":"175","messageId":"176","endLine":148,"endColumn":19},{"ruleId":"173","severity":1,"message":"213","line":161,"column":9,"nodeType":"175","messageId":"176","endLine":161,"endColumn":17},{"ruleId":"173","severity":1,"message":"214","line":2,"column":8,"nodeType":"175","messageId":"176","endLine":2,"endColumn":14},{"ruleId":"173","severity":1,"message":"215","line":4,"column":8,"nodeType":"175","messageId":"176","endLine":4,"endColumn":18},{"ruleId":"173","severity":1,"message":"216","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":17},{"ruleId":"173","severity":1,"message":"217","line":11,"column":8,"nodeType":"175","messageId":"176","endLine":11,"endColumn":15},{"ruleId":"173","severity":1,"message":"218","line":66,"column":8,"nodeType":"175","messageId":"176","endLine":66,"endColumn":13},{"ruleId":"173","severity":1,"message":"219","line":22,"column":8,"nodeType":"175","messageId":"176","endLine":22,"endColumn":17},{"ruleId":"173","severity":1,"message":"220","line":54,"column":12,"nodeType":"175","messageId":"176","endLine":54,"endColumn":22},{"ruleId":"184","severity":1,"message":"185","line":79,"column":23,"nodeType":"186","messageId":"187","endLine":79,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":79,"column":46,"nodeType":"186","messageId":"187","endLine":79,"endColumn":48},{"ruleId":"173","severity":1,"message":"182","line":2,"column":8,"nodeType":"175","messageId":"176","endLine":2,"endColumn":13},{"ruleId":"173","severity":1,"message":"221","line":16,"column":8,"nodeType":"175","messageId":"176","endLine":16,"endColumn":14},{"ruleId":"173","severity":1,"message":"192","line":18,"column":8,"nodeType":"175","messageId":"176","endLine":18,"endColumn":14},{"ruleId":"173","severity":1,"message":"222","line":56,"column":12,"nodeType":"175","messageId":"176","endLine":56,"endColumn":23},{"ruleId":"207","severity":1,"message":"208","line":77,"column":25,"nodeType":"209","endLine":77,"endColumn":27,"suggestions":"223"},{"ruleId":"184","severity":1,"message":"185","line":86,"column":23,"nodeType":"186","messageId":"187","endLine":86,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":86,"column":46,"nodeType":"186","messageId":"187","endLine":86,"endColumn":48},{"ruleId":"173","severity":1,"message":"219","line":22,"column":8,"nodeType":"175","messageId":"176","endLine":22,"endColumn":17},{"ruleId":"173","severity":1,"message":"220","line":54,"column":12,"nodeType":"175","messageId":"176","endLine":54,"endColumn":22},{"ruleId":"184","severity":1,"message":"185","line":79,"column":23,"nodeType":"186","messageId":"187","endLine":79,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":79,"column":46,"nodeType":"186","messageId":"187","endLine":79,"endColumn":48},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],["224"],["225"],"no-unused-vars","'personName' is assigned a value but never used.","Identifier","unusedVar",["224"],["225"],"'Link' is defined but never used.","'Home' is defined but never used.","'Example' is defined but never used.","'axios' is defined but never used.","'Filter' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'NavbarText' is defined but never used.","'history' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'newForm' is assigned a value but never used.","'setNewForm' is assigned a value but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'DialogActions' is defined but never used.","'Notification' is assigned a value but never used.","'Phonebook' is assigned a value but never used.","'Salarys' is assigned a value but never used.","'newJob' is assigned a value but never used.","'message' is assigned a value but never used.","'notifyFlag' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.user.user.email'. Either include it or remove the dependency array.","ArrayExpression",["226"],"'updateId' is assigned a value but never used.","'jobTitle' is assigned a value but never used.","'deleteId' is assigned a value but never used.","'AppBar' is defined but never used.","'CameraIcon' is defined but never used.","'CardMedia' is defined but never used.","'Toolbar' is defined but never used.","'cards' is assigned a value but never used.","'dbService' is defined but never used.","'sortedJobs' is assigned a value but never used.","'AddNew' is defined but never used.","'sortedUsers' is assigned a value but never used.",["227"],"no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},{"desc":"228","fix":"230"},"Update the dependencies array to be: [props.user.user.email]",{"range":"231","text":"232"},{"range":"233","text":"232"},[2223,2225],"[props.user.user.email]",[2701,2703]]